@model MetricCardViewModel

<div class="metric-card">
    <div class="metric-card-header">
        <div>
            <h3 class="metric-card-title">@Model.Title</h3>
            @if (!string.IsNullOrEmpty(Model.Subtitle))
            {
                <p class="metric-card-subtitle">@Model.Subtitle</p>
            }
        </div>
        @if (!string.IsNullOrEmpty(Model.IconType))
        {
            <div class="metric-card-icon">
                @switch (Model.IconType)
                {
                    case "file":
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path>
                            <path d="M14 2v4a2 2 0 0 0 2 2h4"></path>
                        </svg>
                        break;
                    case "eye":
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path>
                            <circle cx="12" cy="12" r="3"></circle>
                        </svg>
                        break;
                    case "calendar":
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M8 2v4"></path>
                            <path d="M16 2v4"></path>
                            <rect width="18" height="18" x="3" y="4" rx="2"></rect>
                            <path d="M3 10h18"></path>
                        </svg>
                        break;
                }
            </div>
        }
    </div>
    <div class="metric-card-value">@Model.Value.ToString("N0")</div>
    @if (Model.Change.HasValue)
    {
        <div class="metric-card-change metric-change-@Model.ChangeType">
            <span class="change-arrow">
                @if (Model.ChangeType == "increase")
                {
                    <text>↑</text>
                }
                else if (Model.ChangeType == "decrease")
                {
                    <text>↓</text>
                }
            </span>
            <span>@Math.Abs(Model.Change.Value)% @Model.Period</span>
        </div>
    }
</div>
